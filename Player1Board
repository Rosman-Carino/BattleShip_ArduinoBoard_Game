// Lab 3B (YouTube Video): https://youtu.be/pLjhPkvZCGw
/*
Name: Rosman R. Cari√±o
Class: ENGR 40M (Autumn 2022 Quarter)
Assignment: Battleship (LAB 3B) - Player One Program
ENGR 40M TA: Josselin Martin Somerville Roberts
*/
// Sender: COM 4
#include <SoftwareSerial.h>
#include <string.h>
char playerOneBoard[8][8];
int playerOneNumShips = 5;
int playerTwoNumShips = 5;
int coinToss;
bool gameOver = false;
const byte ANODE_PINS[8] = {13, 12, 11, 10, 9, 8, 7, 6};
const byte CATHODE_PINS[8] = {A3, A2, A1, A0, 5, 4, 3, 2};
SoftwareSerial playerOne(A4, A5);
void setup()
{
    Serial.begin(115200);
    playerOne.begin(115200);
    configureLEDS();
    // Generate a Random Seed
    randomSeed(analogRead(A6));
    initBoard(playerOneBoard);
    createShips(playerOneBoard);
    welcomeMessage();
    printBoard(playerOneBoard);
    coinToss = coinTossSimulator();
    sendCoinTossResult(); // Need to Upload Player 2 First and
    // Then Upload Player 1
}
void loop()
{
    if (coinToss == 1)
    {
        while (!gameOver)
        {
            displayPlayerOneTurn();
            targetPlayerTwo();
            if (playerTwoNumShips == 0)
            {
                displayPlayerOneWon();
                gameOver = true;
            }
            else
            {
                displayPlayerTwoTurn();
                obtainTargetFromPlayerTwo();
                printBoard(playerOneBoard);
                bool playerTwoWon = checkWinner();
                if (playerTwoWon)
                {
                    displayPlayerOneLost();
                    gameOver = true;
                }
            }
        }
    }
    else
    {
        while (!gameOver)
        {
            displayPlayerTwoTurn();
            obtainTargetFromPlayerTwo();
            printBoard(playerOneBoard);
            bool playerTwoWon = checkWinner();
            if (playerTwoWon)
            {
                displayPlayerOneLost();
                gameOver = true;
            }
            else
            {
                displayPlayerOneTurn();
                targetPlayerTwo();
                if (playerTwoNumShips == 0)
                {
                    displayPlayerOneWon();
                    gameOver = true;
                }
            }
        }
    }
    Serial.println("GAME OVER!");
    displayPlayerBoardLights();
    exit(0);
}
/*
targetPlayerTwo: This function allows Player One to enter
coordinates and attack an attack on Player Two's Board. This
function will obtain a game notification from Player Two's Board to
indicate the outcome of their attack.
*/
void targetPlayerTwo()
{
    sendColumnToPlayerTwo();
    sendRowToPlayerTwo();
    while (playerOne.available() == 0)
    {
    }
    int gameNotification = playerOne.read();
    switch (gameNotification)
    {
    case 1:
        playerTwoNumShips--;
        targetHitMessage();
        break;
    case 2:
        targetMissedMessage();
        break;
    }
}
/*
targetMissedMessage: This function will notify a Player on their screen that
their
entered coordinate target missed.
*/
void targetMissedMessage()
{
    Serial.println();
    Serial.println("***** TARGET MISSED *****");
    Serial.println();
}
/*
targetHitMessage: This function will notify a Player on their screen that their
entered coordinate target destroyed a ship.
*/
void targetHitMessage()
{
    Serial.println();
    Serial.println("***** TARGET HIT *****");
    Serial.println();
    Serial.print("Player 2 Current Number Of Ships: ");
    Serial.println(playerTwoNumShips);
    Serial.println();
}
/*
obtainTargetFromPlayerTwo: This function will obtain coordinates from Player Two
and check the outcome of those coordinates to Player One's Board.
*/
void obtainTargetFromPlayerTwo()
{
    int obtainedCol = colFromPlayerTwo();
    int obtainedRow = rowFromPlayerTwo();
    bool checkTarget = checkShip(obtainedRow,
                                 obtainedCol);
    if (checkTarget)
    {
        targetHit(obtainedRow, obtainedCol);
    }
    else
    {
        targetMissed(obtainedRow, obtainedCol);
    }
}
/*
rowFromPlayerTwo: This function will read in the Row entered by Player Two using
the read() Arduino library function.
@return: enteredRow
*/
int rowFromPlayerTwo()
{
    while (playerOne.available() == 0)
    {
    }
    int enteredRow = playerOne.read();
    return enteredRow;
}
/*
colFromPlayerTwo: This function will read in the Column entered by Player Two
using
the read() Arduino library function.
@return: enteredColumn
*/
int colFromPlayerTwo()
{
    while (playerOne.available() == 0)
    {
    }
    int enteredColumn = playerOne.read();
    return enteredColumn;
}
/*
sendRowToPlayerTwo: This function serves as a wrapper function that will call
enterRow() and sendEnteredRow() to send the Row entered by Player One to Player
Two's Board.
*/
void sendRowToPlayerTwo()
{
    int row = enterRow();
    sendEnteredRow(row);
}
/*
sendEnteredRow: This function will send the Row entered by Player One to
PlayerTwo's Board using the write() Arduino library function.
@param: inputRow
*/
void sendEnteredRow(int inputRow)
{
    playerOne.write(inputRow);
}
/*
enterRow - This function will ask Player One to enter a Row Number between 1 - 8.
Note: This function worked fine when "No Line Ending" was set up in the Serial
Monitor Settings.
@return: Row Number between 0 - 7
*/
int enterRow()
{
    int inputRow;
    Serial.println("Enter Row (1 - 8) below: ");
    while (Serial.available() == 0)
    {
    }
    inputRow = Serial.parseInt();
    while (inputRow < 1 || inputRow > 8)
    {
        Serial.println("Invalid Row!");
        Serial.println("Please enter a Valid Row (1 - 8): ");
        while (Serial.available() == 0)
        {
        }
        inputRow = Serial.parseInt();
    }
    return inputRow - 1;
}
/*
sendColumnToPlayerTwo: This function serves as a wrapper function that will call
enterColumn() and sendEnteredColumn() to send the Column entered by Player One to
Player Two's Board.
*/
void sendColumnToPlayerTwo()
{
    int col = enterColumn();
    sendEnteredColumn(col);
}
/*
sendEnteredColumn: This function will send the Column entered by Player One to
Player Two's Board using the write() Arduino library function.
@param: inputColumn
*/
void sendEnteredColumn(int inputColumn)
{
    playerOne.write(inputColumn);
}
/*
enterColumn: This function will ask a Player to enter a Column (A - H) which will
represent 0 - 7 on the Board.
Note: This function worked fine when "No Line Ending" was set up in the Serial
Monitor Settings.
@return: Convert Column (A - H) to integer ranging
from 1 - 7.
*/
int enterColumn()
{
    char inputColumn;
    int column;
    Serial.println("Enter a Column (A - H) below: ");
    while (Serial.available() == 0)
    {
    }
    inputColumn = Serial.read();
    // Convert Character to Upper Case if Necessary
    if (inputColumn >= 'a' && inputColumn <= 'z')
    {
        inputColumn = charToUpperCase(inputColumn);
    }
    while (inputColumn != 'A' && inputColumn != 'B' && inputColumn != 'C' && inputColumn != 'D' 
                && inputColumn != 'E' && inputColumn != 'F' && inputColumn != 'G' && inputColumn != 'H')
    {
        Serial.println("Invalid Column!");
        Serial.println("Please enter a Valid Column (A - H):");
        while (Serial.available() == 0)
        {
        }
        inputColumn = Serial.read();
        if (inputColumn >= 'a' && inputColumn <= 'z')
        {
            inputColumn = charToUpperCase(inputColumn);
        }
    }
    column = charToInteger(inputColumn);
    return column - 1;
}
/*
charToUpperCase: This function will convert a lowercase character to an uppercase
character
@param: character (Lower Case)
@return: character (Upper Case)
*/
char charToUpperCase(char character)
{
    return character += 'A' - 'a';
}
/*
charToInteger: This function will convert an Upper Case Character to an Integer.
E. X. - 'A' - > 1, 'B' -> 2, etc.
@param: character
@return: Integer of Character
*/
int charToInteger(char character)
{
    return (character - 'A') + 1;
}
/*
checkShip: Checks to see if a ship is loacted at the given coordinate on the
given board.
@parm: board, row, column
@return:
True - Ship is Present on Coordinate
False - Ship is Not Present on Coordinate
*/
bool checkShip(int row, int column)
{
    return playerOneBoard[row][column] == '#';
}
/*
targetHit: This function will change PlayerOne's Board by marking a Ship from '#'
to 'X' indicating that PlayerTwo's shot was successful. Also, this function will
decrement the number of ships by 1 on PlayerOne's Board. Finally, this function
will light up the LED light on the PCB for the given row & column.
@parm: row, col
*/
void targetHit(int row, int col)
{
    Serial.println();
    Serial.println("******************************");
    Serial.println("Target Hit By Player 2!");
    Serial.println("******************************");
    Serial.println();
    // Send Notification to PlayerTwo
    playerOne.write(1);
    playerOneBoard[row][col] = 'X';
    playerOneNumShips--;
    displayTargetLight(row, col);
}
/*
targetMissed: This function will change PlayerOne's Board by marking an Open
Space from '_' to '*' indicating that PlayerTwo's shot was unsuccessful.
@param: row, col
*/
void targetMissed(int row, int col)
{
    Serial.println();
    Serial.println("******************************");
    Serial.println("Target Missed By Player 2!");
    Serial.println("******************************");
    Serial.println();
    playerOneBoard[row][col] = '*';
    // Send Notification to Player Two
    playerOne.write(2);
}
/*
welcomeMessage: This function will be displayed at the beginning of the game
to let players know of the rules of the game.
*/
void welcomeMessage()
{
    Serial.println("####################################################");
    Serial.println("Welcome To Battleship!");
    Serial.println("Your Mission Is To Sink All of Player Two's 5 Ships");
    Serial.println();
    Serial.println("Enter Your Guess in the Following Order: ");
    Serial.println("COLUMN (Letters: A - H)");
    Serial.println("ROW (Numbers: 1-8)");
    Serial.println();
    Serial.println("GOOD LUCK!");
    Serial.println("####################################################");
}
/*
checkWinner: This function will check if there is a Winner for the game. A
winner is determined if the number of ships of the other player is 0.
*/
bool checkWinner()
{
    return playerOneNumShips == 0;
}
/*
Initializes the Board to have a '_' in each [i][j] coordinate in the setup()
function
@param: board[8][8]
*/
void initBoard(char board[8][8])
{
    for (int i = 0; i < 8; i++)
    {
        for (int j = 0; j < 8; j++)
        {
            board[i][j] = '_';
        }
    }
}
/*
createShips: This function will create 5 ships on the board. A ship on the board
will be represented as a '#'. Here is an example of the Board with 5 random
ships:
A B C D E F G H
1|_||_||_||_||_||_||_||_|
2|_||#||_||_||_||_||_||_|
3|_||_||#||_||_||_||_||_|
4|_||_||#||_||_||_||_||#|
5|_||_||_||_||_||_||_||_|
6|_||_||_||_||_||_||_||_|
7|_||_||_||_||_||_||_||_|
8|_||_||_||_||_||_||_||#|
Ships are the Following Locations:
(B, 2), (C,3), (C,4), (H,4) (H,8)
*/
void createShips(char board[8][8])
{
    for (int i = 0; i < 5; i++)
    {
        long row = random(1, 8);
        long column = random(1, 8);
        // Ship Validation
        while (board[row][column] == '#')
        {
            row = random(1, 8);
            column = random(1, 8);
        }
        board[row][column] = '#';
    }
}
/*
Prints the Board in the Following Format:
A B C D E F G H
1|_||_||_||_||_||_||_||_|
2|_||_||_||_||_||_||_||_|
3|_||_||_||_||_||_||_||_|
4|_||_||_||_||_||_||_||_|
5|_||_||_||_||_||_||_||_|
6|_||_||_||_||_||_||_||_|
7|_||_||_||_||_||_||_||_|
8|_||_||_||_||_||_||_||_|
The above format is when the Board is initialized in initBoard()
@param: board[8][8]
*/
void printBoard(char board[8][8])
{
    Serial.println("Player One Board: ");
    Serial.println(" A B C D E F G H");
    for (int i = 0; i < 8; i++)
    {
        Serial.print(i + 1);
        for (int j = 0; j < 8; j++)
        {
            Serial.print("|");
            Serial.print(board[i][j]);
            Serial.print("|");
        }
        Serial.println();
    }
}
/*
displayPlayerOneWon: This function will notify Player One they won.
*/
void displayPlayerOneWon()
{
    Serial.println();
    Serial.println("********************");
    Serial.println("PLAYER ONE YOU WON!");
    Serial.println("********************");
    Serial.println();
}
/*
displayPlayerOneLost: This function will notify Player One they lost.
*/
void displayPlayerOneLost()
{
    Serial.println();
    Serial.println("********************");
    Serial.println("PLAYER ONE YOU LOST!");
    Serial.println("********************");
    Serial.println();
}
/*
displayPlayerOneTurn: This function will notify Player One that it is their turn.
*/
void displayPlayerOneTurn()
{
    Serial.println("********************");
    Serial.println("PLAYER ONE'S TURN");
    Serial.println("********************");
}
/*
displayPlayerTwoTurn: This function will notify Player One that it is Player
Two's
turn.
*/
void displayPlayerTwoTurn()
{
    Serial.println("********************");
    Serial.println("PLAYER TWO'S TURN");
    Serial.println("********************");
}
/*
coinTossSimulator: This function will determine which player will go first,
either Player 1 or Player 2.
@return: Random Number (1 or 2)
*/
int coinTossSimulator()
{
    long coin = random(1, 3);
    Serial.println();
    Serial.println("++++++++++++++++++++++++++++++");
    Serial.print("Player ");
    Serial.print(coin);
    Serial.println(" goes First!");
    Serial.println("++++++++++++++++++++++++++++++");
    Serial.println();
    return int(coin);
}
/*
sendCoinTossResult: This function will send the result of coinTossSimulator() to
Player 2 so they can know who will go first.
*/
void sendCoinTossResult()
{
    playerOne.write(coinToss);
    playerOne.print(coinToss);
}
/*
configureLEDs: This function will set up the LED lights on the PCB to OFF
*/
void configureLEDS()
{
    for (byte i = 0; i < 8; i++)
    {
        pinMode(ANODE_PINS[i], OUTPUT);
        pinMode(CATHODE_PINS[i], OUTPUT);
        digitalWrite(ANODE_PINS[i], HIGH);
        digitalWrite(CATHODE_PINS[i], HIGH);
    }
}
/*
display: This function will be used to turn on LED lights for specific
coordinates
on the PCB that will be represented as a 2-D Array.
@param: pattern
*/
void display(byte pattern[8][8])
{
    for (byte i = 0; i < 8; i++)
    {
        for (byte j = 0; j < 8; j++)
        {
            if (pattern[i][j] == 1)
            {
                digitalWrite(CATHODE_PINS[j], LOW);
            }
            else
            {
                digitalWrite(CATHODE_PINS[j], HIGH);
            }
        }
        digitalWrite(ANODE_PINS[i], LOW);
        digitalWrite(ANODE_PINS[i], HIGH);
    }
}
/*
displayLoserBoard: This function will be used to turn on the Loser LED lights if
a
Player loses the game.
@param: ledOn
*/
void displayLoserBoard(byte ledOn[8][8])
{
    for (int i = 0; i < 8; i++)
    {
        ledOn[i][0] = !ledOn[i][0];
        ledOn[i][1] = !ledOn[i][1];
    }
    for (int j = 2; j < 8; j++)
    {
        ledOn[6][j] = !ledOn[6][j];
        ledOn[7][j] = !ledOn[6][j];
    }
}
/*
displayWinnerBoard: This function will be used to turn on the Winner LED lights
if
a Player wins the game.
@param: ledOn
*/
void displayWinnerBoard(byte ledOn[8][8])
{
    for (int i = 0; i < 8; i++)
    {
        ledOn[i][0] = !ledOn[i][0];
        ledOn[i][1] = !ledOn[i][1];
        ledOn[i][6] = !ledOn[i][6];
        ledOn[i][7] = !ledOn[i][7];
    }
    ledOn[5][3] = !ledOn[5][4];
    ledOn[5][4] = !ledOn[5][4];
    ledOn[6][2] = !ledOn[6][2];
    ledOn[6][5] = !ledOn[6][5];
}
/*
displayTargetLight: This function will turn a specific LED light on the PCB when
a
successful targer has destroyed a ship at (row, col).
@param: row, col
*/
void displayTargetLight(int row, int col)
{
    int x = 0;
    while (x < 1000)
    {
        static byte ledOn[8][8];
        ledOn[row][col] = !ledOn[row][col];
        display(ledOn);
        x++;
    }
}
/*
displayPlayerBoardLights: This function will check a Player's Number of Ships
and if they have 0 Ships left, displayLoserBoard() will be called, otherwise
displayWinnerBoard() will be called at the end of the program
*/
void displayPlayerBoardLights()
{
    int x = 0;
    while (x < 30000000)
    {
        static byte ledOn[8][8];
        if (playerOneNumShips == 0)
        {
            displayLoserBoard(ledOn);
            display(ledOn);
        }
        else
        {
            displayWinnerBoard(ledOn);
            display(ledOn);
        }
        x++;
    }
}